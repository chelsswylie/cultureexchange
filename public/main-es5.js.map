{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/api.service.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/main/main.component.ts","webpack:///src/app/main/main.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","ApiService","http","googleApiKey","eventApiKey","dbApiUrl","api","get","providedIn","routes","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","MainComponent","apiService","getDataBase","subscribe","data","database","console","log","getEvent","events","getTranslation","translation","options","loader","load","google","maps","Map","document","getElementById","center","lat","lng","zoom","miMap","environment","production","bootstrapModule","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Data } from '../app/data';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n  // Google API KEY\ngoogleApiKey = 'AIzaSyDKHFCMQiqFcNERDDcHqqcHRvNqZdqCLQU';\n\n// Ticketmaster API KEY\neventApiKey = 'ZL1Y7N3SNRvR8ISGiM6GE8FrbYErNAV7';\n\n// DATABASE API URL\ndbApiUrl = \"http://localhost:3000/api/CultureExchange\";\n\n\n  constructor(private http: HttpClient) { }\n\n  getLocation() {\n    const api = `https://maps.googleapis.com/maps/api/js?key=${this.googleApiKey}&callback=initMap`\n    return this.http.get(api);\n}\n\n  getTranslation() {\n    const api = 'https://translation.googleapis.com/$discovery/rest?version=v3';\n    return this.http.get(api);\n  }\n\n  getEvent() {\n    const api = `https://app.ticketmaster.com/discovery/v2/events.json?apikey=${this.eventApiKey}`;\n    return this.http.get(api);\n  }\n\n  getDataBase(): Observable<Data[]> {\n    return this.http.get<Data[]>(this.dbApiUrl);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'cultureexchange';\n}\n","<app-main></app-main>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { MainComponent } from './main/main.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    MainComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { ApiService } from \"../api.service\";\nimport { Loader, LoaderOptions } from 'google-maps';\nimport { Data } from '../data';\n\n@Component({\n  selector: 'app-main',\n  templateUrl: './main.component.html',\n  styleUrls: ['./main.component.css']\n})\nexport class MainComponent implements OnInit {\n  location: any;\n  translation: any;\n  events: any;\n  database: Data[];\n\n  constructor(private apiService: ApiService) {\n    this.apiService.getDataBase().subscribe((data) => {\n      this.database = data;\n      console.log(this.database);\n    });\n\n    this.apiService.getEvent().subscribe((data) => {\n      this.events = data;\n      console.log(this.events);\n    });\n\n    this.apiService.getTranslation().subscribe((data) => {\n      this.translation = data;\n      console.log(this.translation);\n    });\n  } \n    \n\n    async miMap() {\n      const options: LoaderOptions = {\n      };\n      const loader = new Loader(\n        'AIzaSyDKHFCMQiqFcNERDDcHqqcHRvNqZdqCLQU',\n        options\n      );\n      \n      const google = await loader.load();\n      return new google.maps.Map(document.getElementById('map'), {\n        center: { lat: 44.182205, lng: -84.506836 },\n        zoom: 8,\n      });\n  \n  }\n  \n\n  ngOnInit(): void {\n    this.miMap();\n\n  }\n  \n\n}\n","<p>main works!</p>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}